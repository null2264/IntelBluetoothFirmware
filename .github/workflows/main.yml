name: CI

on: [push, pull_request, workflow_dispatch]

jobs:

  build:

    runs-on: macos-latest

    steps:

    - uses: actions/checkout@v4

    - name: Manage Version
      run: |
        git fetch --prune --unshallow --tags
        GIT_SHA="$(git rev-parse --short HEAD)"
        CUR_TAG="$(git tag -l | grep 'alpha\|beta' | tail -1)"
        echo "SHORT_SHA=$GIT_SHA" >> $GITHUB_ENV
        if [[ -z $CUR_TAG ]]; then
          echo "OLD_PRE_TAG=NULL" >> $GITHUB_ENV
        else
          echo "OLD_PRE_TAG=$CUR_TAG" >> $GITHUB_ENV
        fi

    - name: Get Lilu SHA
      id: get-lilu-sha
      run: |
        echo "hash=$(git ls-remote https://github.com/acidanthera/Lilu.git HEAD | awk '{ print $1 }')" >> "$GITHUB_OUTPUT"

    - name: Cache Lilu
      id: cache-lilu
      uses: actions/cache@v4
      with:
        path: Lilu.kext
        key: Lilu-${{ steps.get-lilu-sha.outputs.hash }}

    - name: Install MacKernelSDK
      run: |
        git clone --depth=1 https://github.com/acidanthera/MacKernelSDK.git

    - name: Install Lilu SDK
      if: steps.cache-lilu.outputs.cache-hit != 'true'
      run: |
        git clone --depth=1 https://github.com/acidanthera/Lilu.git
        cd Lilu || exit 1
        ln -s ../MacKernelSDK MacKernelSDK
        xcodebuild -configuration Debug -arch x86_64 | xcpretty && ret=${PIPESTATUS[0]}
        if [[ $ret -ne 0 || ! -d build/Debug/Lilu.kext ]]; then
          exit 1
        fi
        cp -R build/Debug/Lilu.kext ../

    - name: Delete unused firmware
      run: |
        rm -f IntelBluetoothFirmware/FwBinary.cpp  # generated firmware
        # NOTE: My card is "ibt-11-5", change it to your card if it's different
        find IntelBluetoothFirmware/fw/ -type f ! -name 'ibt-11-5*' -delete

    - name: Debug Build
      run: |
        xcodebuild -alltargets -configuration Debug | xcpretty && exit ${PIPESTATUS[0]}

    - name: Release Build
      run: |
        xcodebuild -alltargets -configuration Release | xcpretty && exit ${PIPESTATUS[0]}

    - name: Upload to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.repository.name }}
        path: build/*/*.zip
        if-no-files-found: error

    - name: Delete Old Prerelease
      if: github.event_name != 'pull_request' && env.OLD_PRE_TAG != 'NULL'
      run: |
        gh release delete ${{ env.OLD_PRE_TAG }} --cleanup-tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish GitHub Release
      if: contains(github.event.head_commit.message, 'Bump version') == false && github.event_name != 'pull_request'
      uses: softprops/action-gh-release@v2
      with:
        prerelease: true
        files: build/*/*.zip
        tag_name: nightly
        name: Nightly
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
